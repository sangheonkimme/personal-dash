// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  userId        String    @unique @default(cuid())
  email         String    @unique
  emailVerified DateTime? // NextAuth required field
  name          String
  image         String?   // NextAuth profile image
  phone         String?
  role          String    @default("user")
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Budget settings
  salaryDay Int?     @default(25) // 1~31
  currency  String?  @default("KRW")
  locale    String?  @default("ko-KR")

  transactions          Transaction[]
  fixedExpenseTemplates FixedExpenseTemplate[]
  accounts              Account[]
  sessions              Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Transaction {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        String
  date          DateTime
  type          TransactionType // income | expense
  fixed         Boolean         @default(false)
  category      String
  subcategory   String?
  description   String
  amount        Decimal         @db.Decimal(15, 2)
  paymentMethod String?
  recurrence    String?         // RRULE string
  tags          String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([userId, date])
  @@index([userId, type])
  @@index([userId, category])
  @@map("transactions")
}

model FixedExpenseTemplate {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String
  name        String
  amount      Decimal  @db.Decimal(15, 2)
  category    String
  subcategory String?
  rrule       String   // e.g., "FREQ=MONTHLY;BYMONTHDAY=1"
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("fixed_expense_templates")
}

enum TransactionType {
  income
  expense
}
